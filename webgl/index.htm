<!doctype html>
<html>
<head>
    <title>WebGL</title>
    <style type="text/css">
        html, body {
            padding: 0;
            margin: 0;
        }

        canvas {
            position: absolute;
            width: 100%;
            height: 100%;
        }
    </style>
</head>
<body>
    <canvas id="webgl"></canvas>
    <script master>
        var gl;

        function init() {
            gl = document.getElementById('webgl').getContext('webgl');
            gl.clearColor(0.0, 0.0, 0.0, 1);
            gl.enable(gl.DEPTH_TEST);
            gl.depthFunc(gl.LEQUAL);
            gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        }

        function initShaders() {
            var fragmentShader = getShader(gl, "shader-fs");
            var vertexShader = getShader(gl, "shader-vs");

            // Create the shader program
            shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, vertexShader);
            gl.attachShader(shaderProgram, fragmentShader);
            gl.linkProgram(shaderProgram);

            // If creating the shader program failed, alert
            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
                alert("Unable to initialize the shader program.");
            }

            gl.useProgram(shaderProgram);

            vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
            gl.enableVertexAttribArray(vertexPositionAttribute);
        }

        function getShader(gl, id) {
            var shaderScript, theSource, currentChild, shader;

            if (id && id.src && id.type) {
                theSource = id.src;
                shaderScript = id;
            } else if (id && (shaderScript = document.getElementById(id))) {
                theSource = "";
                currentChild = shaderScript.firstChild;
                while (currentChild) {
                    if (currentChild.nodeType == currentChild.TEXT_NODE) theSource += currentChild.textContent;
                    currentChild = currentChild.nextSibling;
                }
            } else return null;

            if (shaderScript.type == "x-shader/x-fragment") {
                shader = gl.createShader(gl.FRAGMENT_SHADER);
            } else if (shaderScript.type == "x-shader/x-vertex") {
                shader = gl.createShader(gl.VERTEX_SHADER);
            } else {
                return null;
            }

            gl.shaderSource(shader, theSource); // The * code !
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                alert("An error occurred compiling the shaders: " + gl.getShaderInfoLog(shader));
                return null;
            }

            return shader;
        }

        var horizAspect = 480.0 / 640.0, squareVerticesBuffer;

        function initBuffers() {
            squareVerticesBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);

            var vertices = [
              1.0, 1.0, 0.0,
              -1.0, 1.0, 0.0,
              1.0, -1.0, 0.0,
              -1.0, -1.0, 0.0
            ];

            gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);
        }

        init();
    </script>

    <script id="shader-fs" type="x-shader/x-fragment">
        void main(void) {
        gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
        }
    </script>
    <script id="shader-vs" type="x-shader/x-vertex">
        attribute vec3 aVertexPosition;
        attribute vec4 aVertexColor;

        uniform mat4 uMVMatrix;
        uniform mat4 uPMatrix;

        varying lowp vec4 vColor;

        void main(void) {
        gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
        vColor = aVertexColor;
        }
    </script>
</body>
</html>
